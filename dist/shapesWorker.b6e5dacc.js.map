{"mappings":"4lBAAA,IAAAA,EAAAC,EAAA,S,oDAMA,MAAMC,EAAoBC,E,YAAOC,kBAEAC,KA6FjC,MAAMC,EAAM,IA3FZ,MACIC,YAAkD,EAAAC,EAAAC,WAClDC,IAAgD,KAChDC,aAAe,EACfC,YAAc,EACdC,KAAgB,IAAIX,GAAoBY,iBACxCC,MAAQ,EACRC,WAAY,EAAAC,EAAAR,WACZS,QAAoB,GACpBC,YAAgF,CAAC,EACjFC,SAAqB,GACrBC,YAA6E,CAAC,EAC9EC,YAA6C,CAAC,EAE9CC,WAAWb,GACPc,KAAKd,IAAMA,CACf,CAEAe,cAAcC,EAAWC,EAAWC,GAChCJ,KAAKZ,YAAcc,EACnBF,KAAKb,aAAegB,EACpBH,KAAKT,MAAQa,CACjB,CAEAC,aAAaC,GAET,MACMpB,IAAEA,EAAGE,YAAEA,EAAWD,aAAEA,EAAYI,MAAEA,GAAUS,KAClD,GAAId,EAAK,CAELA,EAAIqB,OACJrB,EAAIsB,UAAU,EAAG,EAAGC,KAAKC,MAAMtB,EAAcG,GAAQkB,KAAKC,MAAMvB,EAAeI,IAC/EL,EAAIyB,UAAY,GAChBzB,EAAI0B,UAAY,UAEhB,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAOQ,SAAUD,EAAE,CACnC,IAAKE,EAAGC,GAAKV,EAAOO,GACpB3B,EAAI+B,aAAa1B,EAAO,EAAG,EAAGA,GAAQwB,EAAIN,KAAKC,MAAMtB,EAAc,IAAMG,GAAQyB,EAAIP,KAAKC,MAAMvB,EAAe,IAAMI,GACrH,MAAM2B,GAAO,EAAAC,EAAAlC,SAAOmC,EAAAnC,SAAcoC,KAAKjB,GAAUK,KAAKa,GAAzC,IAAkD,GAC/DpC,EAAIqC,KAAK,IAAIC,OAAON,GACxB,CAiBAhC,EAAIuC,SACJvC,EAAIwC,SACR,CACJ,CAEAC,OACI,MAAMzC,IAAEA,EAAGE,YAAEA,EAAWD,aAAEA,EAAYI,MAAEA,GAAUS,KAC9Cd,IACAA,EAAIqB,OACJrB,EAAIsB,UAAU,EAAG,EAAGC,KAAKC,MAAMtB,EAAcG,GAAQkB,KAAKC,MAAMvB,EAAeI,IAC/EL,EAAIyB,UAAY,GAChBzB,EAAI+B,aAAa1B,EAAO,EAAG,EAAGA,EAAOkB,KAAKC,MAAMtB,EAAcG,GAAS,EAAGkB,KAAKC,MAAMvB,EAAeI,GAAS,GAC7GL,EAAI0C,aACJ,EAAApD,EAAAqD,QAAO7B,KAAKX,KAAKyC,UAAU,kBAAkBC,MAAK,SAAUC,EAAQnB,GAChE,MAAMK,GAAO,EAAA1C,EAAAqD,QAAO7B,MAAM6B,OAAO,QAC7BN,EAAOL,EAAKe,KAAK,QACjBC,GAAWhB,EAAKe,KAAK,WACrBE,EAAUjB,EAAKe,KAAK,KACxB/C,EAAIkD,YAAc,UAClBlD,EAAI0B,UAAYW,EAChBrC,EAAImD,YAAcH,EACdC,GAAWjD,IACXA,EAAIuC,OAAO,IAAID,OAAOW,IACtBjD,EAAIqC,KAAK,IAAIC,OAAOW,IAE5B,IACAjD,EAAImD,YAAc,EAClBnD,EAAIuC,SACJvC,EAAIwC,UAEZ,GAMJ7C,KAAKyD,iBAAiB,WAAWC,IAC7B,MAAMC,KACFA,EAAIC,OACJA,EAAMvC,EACNA,EAACC,EACDA,EAACC,EACDA,EAACE,OACDA,GASIiC,EAAIG,KAEZ,GAAa,YAATF,GAAsBC,EAAQ,CAC9B,MAAMvD,EAAMuD,EAAOE,WAAW,MAC9B7D,EAAIiB,WAAWb,EACnB,CACa,mBAATsD,GAA6BtC,GAAKC,GAAKC,GACvCtB,EAAImB,cAAcC,EAAGC,EAAGC,GAEf,kBAAToC,GAA4BlC,GAC5BxB,EAAIuB,aAAaC,EAAA,G","sources":["src/workers/shapesWorker.ts"],"sourcesContent":["import { select } from \"d3\";\nimport { arc, symbol, symbolCircle } from \"d3-shape\";\nimport renderBackground from \"../d3/renderBackground\"\n// @ts-ignore\nimport xmldom from \"../domparser_bundle\";\n\nconst DOMImplementation = xmldom.DOMImplementation;\n\nconst backgroundWorker: Worker = self as any\n\nclass worker {\n    background: ReturnType<typeof renderBackground> = renderBackground()\n    ctx: OffscreenCanvasRenderingContext2D | null = null\n    canvasHeight = 0\n    canvasWidth = 0\n    dom: Document = new DOMImplementation().createDocument()\n    ratio = 2\n    generator = arc()\n    ringSet: string[] = []\n    ringHeights: { [ring: string]: { innerRadius: number, outerRadius: number } } = {}\n    sliceSet: string[] = []\n    sliceAngles: { [slice: string]: { startAngle: number, endAngle: number } } = {}\n    sliceColors: { [slice: string]: string[] } = {}\n\n    setContext(ctx: OffscreenCanvasRenderingContext2D) {\n        this.ctx = ctx\n    }\n\n    setDimensions(w: number, h: number, r: number) {\n        this.canvasWidth = w\n        this.canvasHeight = h\n        this.ratio = r\n    }\n\n    updateCoords(coords: [number, number][]) {\n        // console.log('coords: ', coords)\n        const r = 5\n        const { ctx, canvasWidth, canvasHeight, ratio } = this\n        if (ctx) {\n\n            ctx.save();\n            ctx.clearRect(0, 0, Math.floor(canvasWidth * ratio), Math.floor(canvasHeight * ratio));\n            ctx.lineWidth = .5;\n            ctx.fillStyle = '#FF7F50'\n\n            for (let i = 0; i < coords.length; ++i){\n                let [x, y] = coords[i]\n                ctx.setTransform(ratio, 0, 0, ratio, (x + Math.floor(canvasWidth / 2)) * ratio, (y + Math.floor(canvasHeight / 2)) * ratio)\n                const path = symbol(symbolCircle).size((r * r) * Math.PI)() || \"\"\n                ctx.fill(new Path2D(path))\n            }\n            // for (var i = 0; i < coords.length; i += 3) {\n            //     const [a, b, c] = [coords[i], coords[i + 1], coords[i + 2]]\n            //     const A = Math.hypot(b[0] - a[0], b[1] - a[1])\n            //     const B = Math.hypot(c[0] - b[0], c[1] - b[1])\n            //     const C = Math.hypot(a[0] - c[0], a[1] - c[1])\n            //     const s = (A + B + C) / 2 \n            //     const area = Math.sqrt(s * ((s - A) * (s - B) * (s - C)))\n            //     if (area > 0){\n            //         ctx.beginPath()\n            //         ctx.moveTo(...coords[i])\n            //         ctx.lineTo(...coords[i + 1])\n            //         ctx.lineTo(...coords[i + 2])\n            //         ctx.closePath()\n            //         ctx.stroke()\n            //     }\n            // }\n            ctx.stroke()\n            ctx.restore()\n        }\n    }\n\n    draw() {\n        const { ctx, canvasWidth, canvasHeight, ratio } = this\n        if (ctx) {\n            ctx.save();\n            ctx.clearRect(0, 0, Math.floor(canvasWidth * ratio), Math.floor(canvasHeight * ratio));\n            ctx.lineWidth = .5;\n            ctx.setTransform(ratio, 0, 0, ratio, Math.floor(canvasWidth * ratio) / 2, Math.floor(canvasHeight * ratio) / 2)\n            ctx.beginPath()\n            select(this.dom).selectAll(\"custom.section\").each(function (d: any, i) {\n                const path = select(this).select('path'),\n                    fill = path.attr('fill'),\n                    opacity = +path.attr('opacity'),\n                    svgPath = path.attr('d')\n                ctx.strokeStyle = '#000000'\n                ctx.fillStyle = fill\n                ctx.globalAlpha = opacity\n                if (svgPath && ctx) {\n                    ctx.stroke(new Path2D(svgPath))\n                    ctx.fill(new Path2D(svgPath))\n                }\n            })\n            ctx.globalAlpha = 1\n            ctx.stroke()\n            ctx.restore()\n        }\n    }\n\n}\n\nconst brw = new worker()\n\nself.addEventListener('message', msg => {\n    const {\n        type,\n        canvas,\n        w,\n        h,\n        r,\n        coords\n    }:\n        {\n            type: string,\n            canvas?: OffscreenCanvas,\n            w?: number,\n            h?: number,\n            r?: number,\n            coords: [number, number][]\n        } = msg.data\n\n    if (type === 'set_ctx' && canvas) {\n        const ctx = canvas.getContext('2d')\n        brw.setContext(ctx!)\n    }\n    if (type === 'set_dimensions' && w && h && r) {\n        brw.setDimensions(w, h, r)\n    }\n    if (type === 'update_coords' && coords) {\n        brw.updateCoords(coords)\n    }\n})\n\nfunction pointOnLine(v1: [number, number], v2: [number, number]): [number, number] {\n    // console.log(v1, v2)\n    const scalar = Math.random()\n    const [xV1, yV1] = v1\n    const [xV2, yV2] = v2\n    const distX = xV2 - xV1;\n    const distY = yV2 - yV1;\n    const x = (distX * scalar) + xV1;\n    const y = (distY * scalar) + yV1;\n\n    return [x, y];\n}"],"names":["$4wXTk","parcelRequire","$732d3ccf8d2fd5ef$var$DOMImplementation","$parcel$interopDefault","DOMImplementation","self","$732d3ccf8d2fd5ef$var$brw","background","$gVAGA","default","ctx","canvasHeight","canvasWidth","dom","createDocument","ratio","generator","$35YzH","ringSet","ringHeights","sliceSet","sliceAngles","sliceColors","setContext","this","setDimensions","w","h","r","updateCoords","coords","save","clearRect","Math","floor","lineWidth","fillStyle","i","length","x","y","setTransform","path","$b3pxI","$1Dr1S","size","PI","fill","Path2D","stroke","restore","draw","beginPath","select","selectAll","each","d","attr","opacity","svgPath","strokeStyle","globalAlpha","addEventListener","msg","type","canvas","data","getContext"],"version":3,"file":"shapesWorker.b6e5dacc.js.map"}