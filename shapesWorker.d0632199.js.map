{"mappings":"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","sources":["src/workers/shapesWorker.ts","node_modules/d3-shape/src/symbol.js","node_modules/d3-shape/src/symbol/asterisk.js","node_modules/d3-shape/src/symbol/circle.js","node_modules/d3-shape/src/symbol/cross.js","node_modules/d3-shape/src/symbol/diamond.js","node_modules/d3-shape/src/symbol/diamond2.js","node_modules/d3-shape/src/symbol/plus.js","node_modules/d3-shape/src/symbol/square.js","node_modules/d3-shape/src/symbol/square2.js","node_modules/d3-shape/src/symbol/star.js","node_modules/d3-shape/src/symbol/triangle.js","node_modules/d3-shape/src/symbol/triangle2.js","node_modules/d3-shape/src/symbol/wye.js","node_modules/d3-shape/src/symbol/times.js"],"sourcesContent":["import { select } from \"d3-selection\";\nimport { arc, symbol, symbolCircle } from \"d3-shape\";\nimport renderBackground from \"../d3/renderBackground\"\n// @ts-ignore\nimport xmldom from \"../domparser_bundle\";\n\nconst DOMImplementation = xmldom.DOMImplementation;\n\nconst backgroundWorker: Worker = self as any\n\nclass worker {\n    background: ReturnType<typeof renderBackground> = renderBackground()\n    ctx: OffscreenCanvasRenderingContext2D | null = null\n    canvasHeight = 0\n    canvasWidth = 0\n    dom: Document = new DOMImplementation().createDocument()\n    ratio = 2\n    generator = arc()\n    ringSet: string[] = []\n    ringHeights: { [ring: string]: { innerRadius: number, outerRadius: number } } = {}\n    sliceSet: string[] = []\n    sliceAngles: { [slice: string]: { startAngle: number, endAngle: number } } = {}\n    sliceColors: { [slice: string]: string[] } = {}\n\n    setContext(ctx: OffscreenCanvasRenderingContext2D) {\n        this.ctx = ctx\n    }\n\n    setDimensions(w: number, h: number, r: number) {\n        this.canvasWidth = w\n        this.canvasHeight = h\n        this.ratio = r\n    }\n\n    updateCoords(coords: [number, number][]) {\n        // console.log('coords: ', coords)\n        const r = 5\n        const { ctx, canvasWidth, canvasHeight, ratio } = this\n        if (ctx) {\n\n            ctx.save();\n            ctx.clearRect(0, 0, Math.floor(canvasWidth * ratio), Math.floor(canvasHeight * ratio));\n            ctx.lineWidth = .5;\n            ctx.fillStyle = '#FF7F50'\n\n            for (let i = 0; i < coords.length; ++i){\n                let [x, y] = coords[i]\n                ctx.setTransform(ratio, 0, 0, ratio, (x + Math.floor(canvasWidth / 2)) * ratio, (y + Math.floor(canvasHeight / 2)) * ratio)\n                const path = symbol(symbolCircle).size((r * r) * Math.PI)() || \"\"\n                ctx.fill(new Path2D(path))\n            }\n            // for (var i = 0; i < coords.length; i += 3) {\n            //     const [a, b, c] = [coords[i], coords[i + 1], coords[i + 2]]\n            //     const A = Math.hypot(b[0] - a[0], b[1] - a[1])\n            //     const B = Math.hypot(c[0] - b[0], c[1] - b[1])\n            //     const C = Math.hypot(a[0] - c[0], a[1] - c[1])\n            //     const s = (A + B + C) / 2 \n            //     const area = Math.sqrt(s * ((s - A) * (s - B) * (s - C)))\n            //     if (area > 0){\n            //         ctx.beginPath()\n            //         ctx.moveTo(...coords[i])\n            //         ctx.lineTo(...coords[i + 1])\n            //         ctx.lineTo(...coords[i + 2])\n            //         ctx.closePath()\n            //         ctx.stroke()\n            //     }\n            // }\n            ctx.stroke()\n            ctx.restore()\n        }\n    }\n\n    draw() {\n        const { ctx, canvasWidth, canvasHeight, ratio } = this\n        if (ctx) {\n            ctx.save();\n            ctx.clearRect(0, 0, Math.floor(canvasWidth * ratio), Math.floor(canvasHeight * ratio));\n            ctx.lineWidth = .5;\n            ctx.setTransform(ratio, 0, 0, ratio, Math.floor(canvasWidth * ratio) / 2, Math.floor(canvasHeight * ratio) / 2)\n            ctx.beginPath()\n            select(this.dom).selectAll(\"custom.section\").each(function (d: any, i) {\n                const path = select(this).select('path'),\n                    fill = path.attr('fill'),\n                    opacity = +path.attr('opacity'),\n                    svgPath = path.attr('d')\n                ctx.strokeStyle = '#000000'\n                ctx.fillStyle = fill\n                ctx.globalAlpha = opacity\n                if (svgPath && ctx) {\n                    ctx.stroke(new Path2D(svgPath))\n                    ctx.fill(new Path2D(svgPath))\n                }\n            })\n            ctx.globalAlpha = 1\n            ctx.stroke()\n            ctx.restore()\n        }\n    }\n\n}\n\nconst brw = new worker()\n\nself.addEventListener('message', msg => {\n    const {\n        type,\n        canvas,\n        w,\n        h,\n        r,\n        coords\n    }:\n        {\n            type: string,\n            canvas?: OffscreenCanvas,\n            w?: number,\n            h?: number,\n            r?: number,\n            coords: [number, number][]\n        } = msg.data\n\n    if (type === 'set_ctx' && canvas) {\n        const ctx = canvas.getContext('2d')\n        brw.setContext(ctx!)\n    }\n    if (type === 'set_dimensions' && w && h && r) {\n        brw.setDimensions(w, h, r)\n    }\n    if (type === 'update_coords' && coords) {\n        brw.updateCoords(coords)\n    }\n})\n\nfunction pointOnLine(v1: [number, number], v2: [number, number]): [number, number] {\n    // console.log(v1, v2)\n    const scalar = Math.random()\n    const [xV1, yV1] = v1\n    const [xV2, yV2] = v2\n    const distX = xV2 - xV1;\n    const distY = yV2 - yV1;\n    const x = (distX * scalar) + xV1;\n    const y = (distY * scalar) + yV1;\n\n    return [x, y];\n}","import constant from \"./constant.js\";\nimport {withPath} from \"./path.js\";\nimport asterisk from \"./symbol/asterisk.js\";\nimport circle from \"./symbol/circle.js\";\nimport cross from \"./symbol/cross.js\";\nimport diamond from \"./symbol/diamond.js\";\nimport diamond2 from \"./symbol/diamond2.js\";\nimport plus from \"./symbol/plus.js\";\nimport square from \"./symbol/square.js\";\nimport square2 from \"./symbol/square2.js\";\nimport star from \"./symbol/star.js\";\nimport triangle from \"./symbol/triangle.js\";\nimport triangle2 from \"./symbol/triangle2.js\";\nimport wye from \"./symbol/wye.js\";\nimport times from \"./symbol/times.js\";\n\n// These symbols are designed to be filled.\nexport const symbolsFill = [\n  circle,\n  cross,\n  diamond,\n  square,\n  star,\n  triangle,\n  wye\n];\n\n// These symbols are designed to be stroked (with a width of 1.5px and round caps).\nexport const symbolsStroke = [\n  circle,\n  plus,\n  times,\n  triangle2,\n  asterisk,\n  square2,\n  diamond2\n];\n\nexport default function Symbol(type, size) {\n  let context = null,\n      path = withPath(symbol);\n\n  type = typeof type === \"function\" ? type : constant(type || circle);\n  size = typeof size === \"function\" ? size : constant(size === undefined ? 64 : +size);\n\n  function symbol() {\n    let buffer;\n    if (!context) context = buffer = path();\n    type.apply(this, arguments).draw(context, +size.apply(this, arguments));\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  symbol.type = function(_) {\n    return arguments.length ? (type = typeof _ === \"function\" ? _ : constant(_), symbol) : type;\n  };\n\n  symbol.size = function(_) {\n    return arguments.length ? (size = typeof _ === \"function\" ? _ : constant(+_), symbol) : size;\n  };\n\n  symbol.context = function(_) {\n    return arguments.length ? (context = _ == null ? null : _, symbol) : context;\n  };\n\n  return symbol;\n}\n","import {min, sqrt} from \"../math.js\";\n\nconst sqrt3 = sqrt(3);\n\nexport default {\n  draw(context, size) {\n    const r = sqrt(size + min(size / 28, 0.75)) * 0.59436;\n    const t = r / 2;\n    const u = t * sqrt3;\n    context.moveTo(0, r);\n    context.lineTo(0, -r);\n    context.moveTo(-u, -t);\n    context.lineTo(u, t);\n    context.moveTo(-u, t);\n    context.lineTo(u, -t);\n  }\n};\n","import {pi, sqrt, tau} from \"../math.js\";\n\nexport default {\n  draw(context, size) {\n    const r = sqrt(size / pi);\n    context.moveTo(r, 0);\n    context.arc(0, 0, r, 0, tau);\n  }\n};\n","import {sqrt} from \"../math.js\";\n\nexport default {\n  draw(context, size) {\n    const r = sqrt(size / 5) / 2;\n    context.moveTo(-3 * r, -r);\n    context.lineTo(-r, -r);\n    context.lineTo(-r, -3 * r);\n    context.lineTo(r, -3 * r);\n    context.lineTo(r, -r);\n    context.lineTo(3 * r, -r);\n    context.lineTo(3 * r, r);\n    context.lineTo(r, r);\n    context.lineTo(r, 3 * r);\n    context.lineTo(-r, 3 * r);\n    context.lineTo(-r, r);\n    context.lineTo(-3 * r, r);\n    context.closePath();\n  }\n};\n","import {sqrt} from \"../math.js\";\n\nconst tan30 = sqrt(1 / 3);\nconst tan30_2 = tan30 * 2;\n\nexport default {\n  draw(context, size) {\n    const y = sqrt(size / tan30_2);\n    const x = y * tan30;\n    context.moveTo(0, -y);\n    context.lineTo(x, 0);\n    context.lineTo(0, y);\n    context.lineTo(-x, 0);\n    context.closePath();\n  }\n};\n","import {sqrt} from \"../math.js\";\n\nexport default {\n  draw(context, size) {\n    const r = sqrt(size) * 0.62625;\n    context.moveTo(0, -r);\n    context.lineTo(r, 0);\n    context.lineTo(0, r);\n    context.lineTo(-r, 0);\n    context.closePath();\n  }\n};\n","import {min, sqrt} from \"../math.js\";\n\nexport default {\n  draw(context, size) {\n    const r = sqrt(size - min(size / 7, 2)) * 0.87559;\n    context.moveTo(-r, 0);\n    context.lineTo(r, 0);\n    context.moveTo(0, r);\n    context.lineTo(0, -r);\n  }\n};\n","import {sqrt} from \"../math.js\";\n\nexport default {\n  draw(context, size) {\n    const w = sqrt(size);\n    const x = -w / 2;\n    context.rect(x, x, w, w);\n  }\n};\n","import {sqrt} from \"../math.js\";\n\nexport default {\n  draw(context, size) {\n    const r = sqrt(size) * 0.4431;\n    context.moveTo(r, r);\n    context.lineTo(r, -r);\n    context.lineTo(-r, -r);\n    context.lineTo(-r, r);\n    context.closePath();\n  }\n};\n","import {sin, cos, sqrt, pi, tau} from \"../math.js\";\n\nconst ka = 0.89081309152928522810;\nconst kr = sin(pi / 10) / sin(7 * pi / 10);\nconst kx = sin(tau / 10) * kr;\nconst ky = -cos(tau / 10) * kr;\n\nexport default {\n  draw(context, size) {\n    const r = sqrt(size * ka);\n    const x = kx * r;\n    const y = ky * r;\n    context.moveTo(0, -r);\n    context.lineTo(x, y);\n    for (let i = 1; i < 5; ++i) {\n      const a = tau * i / 5;\n      const c = cos(a);\n      const s = sin(a);\n      context.lineTo(s * r, -c * r);\n      context.lineTo(c * x - s * y, s * x + c * y);\n    }\n    context.closePath();\n  }\n};\n","import {sqrt} from \"../math.js\";\n\nconst sqrt3 = sqrt(3);\n\nexport default {\n  draw(context, size) {\n    const y = -sqrt(size / (sqrt3 * 3));\n    context.moveTo(0, y * 2);\n    context.lineTo(-sqrt3 * y, -y);\n    context.lineTo(sqrt3 * y, -y);\n    context.closePath();\n  }\n};\n","import {sqrt} from \"../math.js\";\n\nconst sqrt3 = sqrt(3);\n\nexport default {\n  draw(context, size) {\n    const s = sqrt(size) * 0.6824;\n    const t = s  / 2;\n    const u = (s * sqrt3) / 2; // cos(Math.PI / 6)\n    context.moveTo(0, -s);\n    context.lineTo(u, t);\n    context.lineTo(-u, t);\n    context.closePath();\n  }\n};\n","import {sqrt} from \"../math.js\";\n\nconst c = -0.5;\nconst s = sqrt(3) / 2;\nconst k = 1 / sqrt(12);\nconst a = (k / 2 + 1) * 3;\n\nexport default {\n  draw(context, size) {\n    const r = sqrt(size / a);\n    const x0 = r / 2, y0 = r * k;\n    const x1 = x0, y1 = r * k + r;\n    const x2 = -x1, y2 = y1;\n    context.moveTo(x0, y0);\n    context.lineTo(x1, y1);\n    context.lineTo(x2, y2);\n    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);\n    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);\n    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);\n    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);\n    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);\n    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);\n    context.closePath();\n  }\n};\n","import {min, sqrt} from \"../math.js\";\n\nexport default {\n  draw(context, size) {\n    const r = sqrt(size - min(size / 6, 1.7)) * 0.6189;\n    context.moveTo(-r, -r);\n    context.lineTo(r, r);\n    context.moveTo(-r, r);\n    context.lineTo(r, -r);\n  }\n};\n"],"names":["$jwO5r","parcelRequire","$3PWDX","$cbveU","sqrt","$130e666881f78e68$export$2e2bcd8739ae039","draw","context","size","r","pi","moveTo","arc","tau","$504ef09d972d3305$var$kr","sin","cos","$80c3c9cba49b32b9$export$2e2bcd8739ae039","type","path","$jaPjS","withPath","symbol","buffer","apply","this","arguments","default","undefined","_","length","$732d3ccf8d2fd5ef$var$DOMImplementation","$parcel$interopDefault","DOMImplementation","self","$732d3ccf8d2fd5ef$var$brw","background","$gVAGA","ctx","canvasHeight","canvasWidth","dom","createDocument","ratio","generator","$35YzH","ringSet","ringHeights","sliceSet","sliceAngles","sliceColors","setContext","setDimensions","w","h","updateCoords","coords","save","clearRect","Math","floor","lineWidth","fillStyle","i","x","y","setTransform","PI","fill","Path2D","stroke","restore","beginPath","selectAll","each","d","select","attr","opacity","svgPath","strokeStyle","globalAlpha","addEventListener","msg","canvas","data","getContext"],"version":3,"file":"shapesWorker.d0632199.js.map"}